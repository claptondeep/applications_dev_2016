# Script:  dict_crack.py
# Description: Cracks password hash using a dictionary of common passwords.
# Author:  Matt Muir
# Created: Nov 2016
import sys, hashlib, email_analysis

def dict_attack(passwd_hash):
    """Checks password hash against a dictionary of common passwords"""

    print '[*] Cracking hash:', passwd_hash

    # set up list of common password words
    dic = ['123','1234','12345','123456','1234567','12345678','password',
   'qwerty','abc','abcd','abc123','111111','monkey','arsenal','letmein','trustno1',
   'dragon','baseball','superman','iloveyou','starwars','montypython','cheese',
   '123123','football','password','batman']

    

    passwd_found = False

    dic_hash = []                                       # initialises dic_hash variable
    for dic_item in dic:                                # for each pass in dictionary
        md5Hash = hashlib.md5(dic_item)                 # hash pass using MD5
        dic_hash.append(md5Hash.hexdigest())            # append hex hash to dic_hash

    upper_dic = []                                      # initialises upper_dic variable
    for dic_item in dic:                                # for each pass in dictionary
        upper_dic.append(dic_item.upper())              # append uppercase version of pass
                                                        # to upper_dic
                                               
    upper_dic_hash = []                                 # initialises upper_dic_hash variable
    for dic_item in upper_dic:                          # for each pass in upper_dic
        md5Hash = hashlib.md5(dic_item)                 # hash pass using MD5
        upper_dic_hash.append(md5Hash.hexdigest())      # append hex hash to upper_dic_hash

    capital_dic = []                                    # initialises capital_dic variable
    for dic_item in dic:                                # for each pass in dic
        capital_dic.append(dic_item.capitalize())       # append capitalized version of pass to
                                                        # capital_dic_pass

    capital_dic_hash = []                               # initialises capital_dic_hash variable
    for dic_item in capital_dic:                        # for each pass in capital_dic
        md5Hash = hashlib.md5(dic_item)                 # hash pass using MD5
        capital_dic_hash.append(md5Hash.hexdigest())    # append hex hash to capital_dic_hash

    if passwd_hash in dic_hash:                         # if passwd_hash is found in dic_hash
        passwd_found = True                             # set passwd_found to True
        crack_pass=dic[dic_hash.index(passwd_hash)]     # crack_pass equals index of hash in dic
    elif passwd_hash in upper_dic_hash:                 
            passwd_found = True
            crack_pass=upper_dic[upper_dic_hash.index(passwd_hash)]
    else:
        if passwd_hash in capital_dic_hash:
            passwd_found = True
            crack_pass = capital_dic[capital_dic_hash.index(passwd_hash)]
            
    
    if passwd_found:
        print '[+] Password recovered: %s'% (crack_pass)
    else:
        print '[-] Password not recovered'
        #sys.exit()

    
                
def main():
        #print'[dict_crack] Tests'
        # test cases
        #passwd_hash = '5badcaf789d3d1d09794d8f021f40f0e'
        passwd_hash = passwd_hash.lower()               # makes MD5 value lowercase for greater
                                                        # compatibility between test values
        dict_attack(passwd_hash)


if __name__ == '__main__':
	main()
